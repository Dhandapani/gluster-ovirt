!!org.ovirt.engine.api.restapi.rsdl.MetaData
actions:
- name: /api/vms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/vms/{vm:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}|rel=delete
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}|rel=update
  request:
    body:
      parameterType: VM
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          vm.name: xs:string
          vm.cluster.id|name: xs:string
          vm.timezone: xs:string
          vm.os.boot.dev: xs:string
          vm.custom_properties.custom_property--COLLECTION: {name: 'xs:string', value: 'xs:string'}
          vm.os.type: xs:string
          vm.usb.enabled: xs:boolean
          vm.type: xs:string
          vm.os.initRd: xs:string
          vm.display.monitors: xs:int
          vm.display.type: xs:string
          vm.os.cmdline: xs:string
          vm.cpu.topology.cores: xs:int
          vm.memory: xs:long
          vm.high_availability.priority: xs:int
          vm.high_availability.enabled: xs:boolean
          vm.domain.name: xs:string
          vm.description: xs:string
          vm.stateless: xs:boolean
          vm.cpu.topology.sockets: xs:int
          vm.placement_policy.affinity: xs:string
          vm.placement_policy.host.id|name: xs:string
          vm.origin: xs:string
          vm.os.kernel: xs:string
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms|rel=add
  request:
    body:
      parameterType: VM
      signatures:
      - mandatoryArguments: {vm.name: 'xs:string', vm.template.id|name: 'xs:string', vm.cluster.id|name: 'xs:string'}
        optionalArguments:
          vm.timezone: xs:string
          vm.os.boot.dev: xs:string
          vm.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          vm.os.type: xs:string
          vm.usb.enabled: xs:boolean
          vm.type: xs:string
          vm.os.initRd: xs:string
          vm.display.monitors: xs:int
          vm.display.type: xs:string
          vm.os.cmdline: xs:string
          vm.cpu.topology.cores: xs:int
          vm.memory: xs:long
          vm.high_availability.priority: 'xs:int'
          vm.high_availability.enabled: 'xs:boolean'
          vm.domain.name: xs:string
          vm.description: xs:string
          vm.stateless: 'xs:boolean'
          vm.cpu.topology.sockets: xs:int
          vm.placement_policy.affinity: xs:string
          vm.placement_policy.host.id|name: xs:string
          vm.origin: xs:string
          vm.os.kernel: xs:string
          vm.disks.clone: 'xs:boolean'
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/vms/{vm:id}/shutdown|rel=shutdown
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/stop|rel=stop
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/start|rel=start
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.vm.os.initRd: 'xs:string', action.vm.domain.name: 'xs:string',
          action.vm.placement_policy.host.id|name: 'xs:string', action.vm.placement_policy.affinity: 'xs:string',
          action.async: 'xs:boolean', action.vm.os.kernel: 'xs:string', action.grace_period.expiry: 'xs:long',
          action.vm.display.type: 'xs:string', action.vm.stateless: 'xs:boolean', action.vm.os.cmdline: 'xs:string',
          action.vm.domain.user.username: 'xs:string', action.pause: 'xs:boolean',
          action.vm.os.boot.dev: 'xs:string', action.vm.domain.user.password: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/suspend|rel=suspend
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.exclusive: 'xs:boolean',
          action.discard_snapshots: 'xs:boolean', action.storage_domain.id|name: 'xs:string',
          action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/detach|rel=detach
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/migrate|rel=migrate
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.host.id|name: 'xs:string', action.async: 'xs:boolean',
          action.force: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/move|rel=move
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.storage_domain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/ticket|rel=ticket
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/cdroms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/cdroms/{cdrom:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/cdroms/{cdrom:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/cdroms/{cdrom:id}|rel=update
  request:
    body:
      parameterType: CdRom
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cdrom.file.id: 'xs:string'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/cdroms|rel=add
  request:
    body:
      parameterType: CdRom
      signatures:
      - mandatoryArguments: {cdrom.file.id: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/vms/{vm:id}/disks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/disks/{disk:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/disks/{disk:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/vms/{vm:id}/disks/{disk:id}|rel=update
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          size: xs:int
          disk.type: xs:string
          disk.interface: xs:string
          disk.format: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/disks|rel=add
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {size: 'xs:int', disk.type: 'xs:string', disk.interface: 'xs:string', disk.format: 'xs:string'}
        optionalArguments:
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.storage_domains--COLLECTION: {storage_domain.id|name: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/vms/{vm:id}/nics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/nics/{nic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/nics/{nic:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/nics/{nic:id}|rel=update
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.name: 'xs:string', nic.mac.address: 'xs:string', nic.interface: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/nics|rel=add
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {nic.network.id|name: 'xs:string', nic.name: 'xs:string'}
        optionalArguments: {nic.mac.address: 'xs:string', nic.interface: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/vms/{vm:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/vms/{vm:id}/statistics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/statistics/{statistic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/vms/{vm:id}/snapshots|rel=add
  request:
    body:
      parameterType: Snapshot
      signatures:
      - mandatoryArguments: {snapshot.description: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/restore
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vms/{vm:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/vms/{vm:id}/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/capabilities|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}|rel=delete
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagdomain.host.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/storagedomains/{storagedomain:id}|rel=update
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {storagdomain.name: 'xs:string'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/storagedomains|rel=add
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagdomain.name: 'xs:string', storagdomain.host.id|name: 'xs:string',
          storagdomain.type: 'xs:string', storagdomain.storage.type: 'xs:string',
          storagdomain.format: 'xs:boolean', storagdomain.storage.address: 'xs:string',
          storagdomain.storage.logical_unit--COLLECTION: {logical_unit.address: 'xs:string',
            logical_unit.port: 'xs:int', logical_unit.target: 'xs:string', logical_unit.username: 'xs:string', logical_unit.password: 'xs:string',
            logical_unit.serial: 'xs:string', logical_unit.vendor_id: 'xs:string', logical_unit.product_id: 'xs:string',
            logical_unit.lun_mapping: 'xs:int', logical_unit.portal: 'xs:string', logical_unit.paths: 'xs:int', logical_unit.id: 'xs:string'}}
        optionalArguments: {}
      - mandatoryArguments: {storagdomain.name: 'xs:string', storagdomain.host.id|name: 'xs:string',
          storagdomain.type: 'xs:string', storagdomain.storage.type: 'xs:string',
          storagdomain.format: 'xs:boolean',storagdomain.storage.address: 'xs:string', 
          storagdomain.storage.path: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {storagdomain.name: 'xs:string', storagdomain.host.id|name: 'xs:string',
          storagdomain.type: 'xs:string', storagdomain.storage.type: 'xs:string',
          storagdomain.format: 'xs:boolean', storagdomain.storage.path: 'xs:string'}
        optionalArguments: {}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/storagedomains/{storagedomain:id}/files|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/files/{file:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/storagedomains/{storagedomain:id}/templates|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/templates/{template:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/templates/{template:id}/import|rel=import
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string', action.storagedomain.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/storagedomains/{storagedomain:id}/vms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/vms/{vm:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/vms/{vm:id}/import|rel=import
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string', action.storagedomain.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/clusters|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/clusters/{cluster:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/clusters/{cluster:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/clusters/{cluster:id}|rel=update
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cluster.name: 'xs:string', cluster.description: 'xs:string', cluster.cpu.id: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int',
        cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean', cluster.scheduling_policy.policy: 'xs:string',
        cluster.scheduling_policy.thresholds.low: 'xs:int', cluster.scheduling_policy.thresholds.high: 'xs:int', cluster.scheduling_policy.thresholds.duration: 'xs:int',
        cluster.error_handling.on_error: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/clusters|rel=add
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {cluster.data_center.id|name: 'xs:string', cluster.name: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int', cluster.cpu.id: 'xs:string'}
        optionalArguments: {cluster.description: 'xs:string', cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean',
        cluster.scheduling_policy.policy: 'xs:string', cluster.scheduling_policy.thresholds.low: 'xs:int', cluster.scheduling_policy.thresholds.high: 'xs:int',
        cluster.scheduling_policy.thresholds.duration: 'xs:int', cluster.error_handling.on_error: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/clusters/{cluster:id}/networks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
    headers: {}
- name: /api/clusters/{cluster:id}/networks/{network:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/clusters/{cluster:id}/networks/{network:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/clusters/{cluster:id}/networks/{network:id}|rel=update
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.display: 'xs:boolean'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/clusters/{cluster:id}/networks|rel=add
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {network.id|name: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/clusters/{cluster:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/clusters/{cluster:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/clusters/{cluster:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/clusters/{cluster:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json, Expect: 201-created}
- name: /api/datacenters/{datacenter:id}|rel=update
  request:
    body:
      parameterType: DataCenter
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          datacenter.name: xs:string
          datacenter.storage_type: xs:string
          datacenter.version.major: xs:int
          datacenter.version.minor: xs:int
          datacenter.description: xs:string
          datacenter.storage_format: xs:string
    urlparams: {}
    headers: {}
- name: /api/datacenters|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/datacenters/{datacenter:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/datacenters/{datacenter:id}|rel=delete
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/datacenters|rel=add
  request:
    body:
      parameterType: DataCenter
      signatures:
      - mandatoryArguments: {datacenter.name: 'xs:string', datacenter.storage_type: 'xs:string', datacenter.version.major: 'xs:int', datacenter.version.minor: 'xs:int'}
        optionalArguments:
          datacenter.description: xs:string
          datacenter.storage_format: xs:string
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/datacenters/{datacenter:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/datacenters/{datacenter:id}/storagedomains|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/datacenters/{datacenter:id}/storagedomains|rel=add
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/activate|rel=activate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/deactivate|rel=deactivate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/domains|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/domains/{domain:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/domains/{domain:id}/groups|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/domains/{domain:id}/groups/{group:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/domains/{domain:id}/users|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/domains/{domain:id}/users/{user:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/events|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      from: {context: matrix, type: 'xs:string', value: event_id, required: false}
    headers: {}
- name: /api/events/{event:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/groups/{group:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/groups|rel=add
  request:
    body:
      parameterType: Group
      signatures:
      - mandatoryArguments: {group.name: 'xs:string'}
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/groups/{group:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.data_center.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.cluster.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.host.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.storage_domain.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vm.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vmpool.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.template.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/groups/{group:id}/roles|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/groups/{group:id}/roles|rel=add
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {role.id: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/groups/{group:id}/roles/{role:id}/permits|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}/permits/{permit:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}/permits/{permit:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}/permits|rel=add
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/groups/{group:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/groups/{group:id}/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/hosts/{host:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/hosts/{host:id}|rel=update
  request:
    body:
      parameterType: Host
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {host.name: 'xs:string', host.address: 'xs:string', host.root_password: 'xs:string', host.cluster.id: 'xs:string',
          host.port: 'xs:int', host.storage_manager.priority: 'xs:int', host.power_management.type: 'xs:string',
          host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string', host.power_management.user_name: 'xs:string',
          host.power_management.password: 'xs:string', host.power_management.options.option--COLLECTION: {name: 'xs:string', value: 'xs:string'}}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts|rel=add
  request:
    body:
      parameterType: Host
      signatures:
      - mandatoryArguments: {host.name: 'xs:string', host.address: 'xs:string', host.root_password: 'xs:string', host.cluster.id: 'xs:string'}
        optionalArguments: {host.port: 'xs:int', host.storage_manager.priority: 'xs:int', host.power_management.type: 'xs:string',
          host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string', host.power_management.user_name: 'xs:string',
          host.power_management.password: 'xs:string', host.power_management.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'},
          host.reboot_after_installation: 'xs:boolean'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/activate|rel=activate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/approve|rel=approve
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.cluster.id|name: 'xs:string', action.async: 'xs:boolean',
          action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/commitnetconfig|rel=commitnetconfig
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/deactivate|rel=deactivate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/fence|rel=fence
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/install|rel=install
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/iscsidiscover|rel=iscsidiscover
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.iscsi.address: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/iscsilogin|rel=iscsilogin
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.iscsi.address: 'xs:string', action.iscsi.target: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/nics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/nics/{nic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/nics/{nic:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/hosts/{host:id}/nics/{nic:id}|rel=update
  request:
    body:
      parameterType: HostNIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          hostnic.bonding.slaves.host_nic--COLLECTION: {host_nic.id|name: 'xs:string'}
          hostnic.network.id|name: xs:string
          hostnic.name: xs:string
          hostnic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string',
            type: 'xs:string'}
          hostnic.ip.gateway: xs:string
          hostnic.boot_protocol: xs:string
          hostnic.mac: xs:string
          hostnic.ip.address: xs:string
          hostnic.ip.netmask: xs:string
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/nics|rel=add
  request:
    body:
      parameterType: HostNIC
      signatures:
      - mandatoryArguments: {hostnic.network.id|name: 'xs:string', hostnic.name: 'xs:string'}
        optionalArguments:
          hostnic.bonding.slaves.host_nic--COLLECTION: {host_nic.id|name: 'xs:string'}
          hostnic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string',
            type: 'xs:string'}
          hostnic.ip.gateway: xs:string
          hostnic.boot_protocol: xs:string
          hostnic.mac: xs:string
          hostnic.ip.address: xs:string
          hostnic.ip.netmask: xs:string
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/nics/setupnetworks|rel=setupnetworks
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          action.host_nics.host_nic--COLLECTION: {host_nic.network.id|name: 'xs:string', host_nic.name: 'xs:string', host_nic.ip.gateway: 'xs:string',
            host_nic.boot_protocol: 'xs:string', host_nic.mac: 'xs:string', host_nic.ip.address: 'xs:string', host_nic.ip.netmask: 'xs:string',
            host_nic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string', option.type: 'xs:string'},
            bonding.slaves.host_nic--COLLECTION: {host_nic.name|id: 'xs:string'}}
          action.checkConnectivity: xs:boolean
          action.connectivityTimeout: xs:int
          action.force: xs:boolean
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/nics/{nic:id}/attach|rel=attach
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.network.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/nics/{nic:id}/attach|rel=detach
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.network.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/nics/{nic:id}/statistics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/nics/{nic:id}/statistics/{statistic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/hosts/{host:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/hosts/{host:id}/statistics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/statistics/{statistic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/storage|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/storage/{storag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/hosts/{host:id}/tags|rel=add|
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/networks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/networks/{network:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/networks/{network:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/networks/{network:id}|rel=update
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.description: 'xs:string', network.vlan.id: 'xs:string',
          network.ip.address: 'xs:string', network.ip.gateway: 'xs:string', network.ip.netmask: 'xs:string',
          network.display: 'xs:boolean', network.stp: 'xs:boolean'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/networks|rel=add
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {network.data_center.id|name: 'xs:string', network.name: 'xs:string'}
        optionalArguments: {network.description: 'xs:string', network.vlan.id: 'xs:string',
          network.ip.address: 'xs:string', network.ip.gateway: 'xs:string', network.ip.netmask: 'xs:string',
          network.display: 'xs:boolean', network.stp: 'xs:boolean'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/roles|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/roles/{role:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/roles/{role:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/roles|rel=add
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {role.name: 'xs:string', role.permits.permit--COLLECTION: {permit.id: 'xs:string'}}
        optionalArguments: {role.description: 'xs:string', role.administrative: 'xs:boolean'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/roles/{role:id}|rel=update
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {role.permits.permit--COLLECTION: {id: 'xs:string'}, role.description: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/roles/{role:id}/permits|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/roles/{role:id}/permits/{permit:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/roles/{role:id}/permits/{permit:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/roles/{role:id}/permits|rel=add
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/tags/{tag:id}|rel=update
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {tag.name: 'xs:string', tag.description: 'xs:string', tag.parent.name: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.name: 'xs:string'}
        optionalArguments: {tag.description: 'xs:string', tag.parent.name: 'xs:string'}
    urlparams: {}
    headers: {}
- name: /api/templates|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/templates/{template:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/templates/{template:id}|rel=update
  request:
    body:
      parameterType: Template
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          template.name: 'xs:string'
          template.memory: xs:long
          template.cpu.topology.cores: xs:int
          template.high_availability.enabled: 'xs:boolean'
          template.os.cmdline: xs:string
          template.origin: xs:string
          template.high_availability.priority: 'xs:int'
          template.timezone: xs:string
          template.domain.name: xs:string
          template.type: xs:string
          template.stateless: 'xs:boolean'
          template.placement_policy.affinity: xs:string
          template.description: xs:string
          template.custom_properties.custom_property--COLLECTION: {name: 'xs:string', value: 'xs:string'}
          template.os.type: xs:string
          template.os.boot.dev: xs:string
          template.cpu.topology.sockets: xs:int
          template.os.kernel: xs:string
          template.display.type: xs:string
          template.display.monitors: xs:int
          template.os.initRd: xs:string
          template.usb.enabled: xs:boolean
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/templates|rel=add
  request:
    body:
      parameterType: Template
      signatures:
      - mandatoryArguments: {template.vm.id|name: 'xs:string', template.name: 'xs:string'}
        optionalArguments:
          template.memory: xs:long
          template.cpu.topology.cores: xs:int
          template.high_availability.enabled: 'xs:boolean'
          template.os.cmdline: xs:string
          template.origin: xs:string
          template.high_availability.priority: 'xs:int'
          template.timezone: xs:string
          template.domain.name: xs:string
          template.type: xs:string
          template.stateless: 'xs:boolean'
          template.placement_policy.affinity: xs:string
          template.description: xs:string
          template.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          template.os.type: xs:string
          template.os.boot.dev: xs:string
          template.cpu.topology.sockets: xs:int
          template.os.kernel: xs:string
          template.display.type: xs:string
          template.display.monitors: xs:int
          template.os.initRd: xs:string
          template.usb.enabled: xs:boolean
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/templates/{template:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.storage_domain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.exclusive: 'xs:boolean',
          action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/templates/{template:id}/cdroms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/cdroms/{cdrom:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/disks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/disks/{disk:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/nics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/nics/{nic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/templates/{template:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/users|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false} 
    headers: {}
- name: /api/users/{user:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/users|rel=add
  request:
    body:
      parameterType: User
      signatures:
      - mandatoryArguments: {user.user_name: 'xs:string', user.domain.id|name: 'xs:string'}
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/users/{user:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/users/{user:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.data_center.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.cluster.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.host.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.storage_domain.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vm.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vmpool.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.template.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/users/{user:id}/roles|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/users/{user:id}/roles|rel=add
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {role.id: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/users/{user:id}/roles/{role:id}/permits|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}/permits/{permit:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}/permits/{permit:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}/permits|rel=add
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/users/{user:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/users/{user:id}/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vmpools|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/vmpools/{vmpool:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vmpools/{vmpool:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/vmpools/{vmpool:id}|rel=update
  request:
    body:
      parameterType: VmPool
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {vmpool.cluster.id|name: 'xs:string', vmpool.template.id|name: 'xs:string',
          vmpool.name: 'xs:string'}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vmpools|rel=add
  request:
    body:
      parameterType: VmPool
      signatures:
      - mandatoryArguments: {vmpool.cluster.id|name: 'xs:string', vmpool.template.id|name: 'xs:string',
          vmpool.name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
- name: /api/vmpools/{vmpool:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vmpools/{vmpool:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vmpools/{vmpool:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/vmpools/{vmpool:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers: {Content-Type: application/xml|json}
    
